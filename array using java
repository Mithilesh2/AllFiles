def rotate_array(arr, rotation_count):
    n = len(arr)
    # Calculate the effective rotation count to handle cases where rotation_count is larger than the array size
    effective_rotation_count = rotation_count % n
    
    # Create a new array to store the rotated elements
    rotated_arr = [0] * n
    
    for i in range(n):
        # Calculate the new index for the element after rotation
        new_index = (i + effective_rotation_count) % n
        rotated_arr[new_index] = arr[i]
    
    return rotated_arr

# Example usage:
input_array = [9, 8, 7, 6, 5]
rotation_count = 2
result = rotate_array(input_array, rotation_count)
print(result)  # Output: [6, 5, 9, 8, 7]
